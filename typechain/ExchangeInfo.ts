/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ExchangeInfoInterface extends utils.Interface {
  contractName: "ExchangeInfo";
  functions: {
    "changeExchangeAddress(address)": FunctionFragment;
    "closeLongLiquidateList(uint256)": FunctionFragment;
    "closeShortLiquidateList(uint256)": FunctionFragment;
    "exchange()": FunctionFragment;
    "getLiquidateList(int256,int256)": FunctionFragment;
    "getMinimumLongBaycOut(uint256)": FunctionFragment;
    "getMinimumLongUsdOut(uint256)": FunctionFragment;
    "getMinimumShortBaycOut(uint256)": FunctionFragment;
    "getMinimumShortUsdOut(uint256)": FunctionFragment;
    "openLongLiquidateList(uint256)": FunctionFragment;
    "openShortLiquidateList(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeExchangeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "closeLongLiquidateList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeShortLiquidateList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exchange", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLiquidateList",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumLongBaycOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumLongUsdOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumShortBaycOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumShortUsdOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openLongLiquidateList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openShortLiquidateList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeExchangeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeLongLiquidateList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeShortLiquidateList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidateList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumLongBaycOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumLongUsdOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumShortBaycOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumShortUsdOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLongLiquidateList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openShortLiquidateList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ExchangeInfo extends BaseContract {
  contractName: "ExchangeInfo";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExchangeInfoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeExchangeAddress(
      exchangeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeLongLiquidateList(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    closeShortLiquidateList(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    exchange(overrides?: CallOverrides): Promise<[string]>;

    getLiquidateList(
      newvBaycPoolSize: BigNumberish,
      newvUsdPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getMinimumLongBaycOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumLongUsdOut(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumShortBaycOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumShortUsdOut(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openLongLiquidateList(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    openShortLiquidateList(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  changeExchangeAddress(
    exchangeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeLongLiquidateList(
    _BaycAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  closeShortLiquidateList(
    _BaycAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  exchange(overrides?: CallOverrides): Promise<string>;

  getLiquidateList(
    newvBaycPoolSize: BigNumberish,
    newvUsdPoolSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  getMinimumLongBaycOut(
    _usdAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumLongUsdOut(
    _BaycAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumShortBaycOut(
    _usdAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumShortUsdOut(
    _BaycAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openLongLiquidateList(
    _usdAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  openShortLiquidateList(
    _usdAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeExchangeAddress(
      exchangeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    closeLongLiquidateList(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    closeShortLiquidateList(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    exchange(overrides?: CallOverrides): Promise<string>;

    getLiquidateList(
      newvBaycPoolSize: BigNumberish,
      newvUsdPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getMinimumLongBaycOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumLongUsdOut(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumShortBaycOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumShortUsdOut(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLongLiquidateList(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    openShortLiquidateList(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    changeExchangeAddress(
      exchangeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeLongLiquidateList(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeShortLiquidateList(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchange(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidateList(
      newvBaycPoolSize: BigNumberish,
      newvUsdPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumLongBaycOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumLongUsdOut(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumShortBaycOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumShortUsdOut(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLongLiquidateList(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openShortLiquidateList(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeExchangeAddress(
      exchangeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeLongLiquidateList(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeShortLiquidateList(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidateList(
      newvBaycPoolSize: BigNumberish,
      newvUsdPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumLongBaycOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumLongUsdOut(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumShortBaycOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumShortUsdOut(
      _BaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openLongLiquidateList(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openShortLiquidateList(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
