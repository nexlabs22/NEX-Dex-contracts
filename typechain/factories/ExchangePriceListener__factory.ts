/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ExchangePriceListener,
  ExchangePriceListenerInterface,
} from "../ExchangePriceListener";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "updateInterval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "counter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "exchange",
    outputs: [
      {
        internalType: "contract Exchange",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "interval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516103f63803806103f683398101604081905261002f91610040565b608052426002556000600155610059565b60006020828403121561005257600080fd5b5051919050565b6080516103756100816000396000818160c70152818161011601526101e201526103756000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80633f3b3b27146100675780634585e33b1461008357806361bc221a146100985780636e04ff0d146100a1578063947a36fb146100c2578063d2f7265a146100e9575b600080fd5b61007060025481565b6040519081526020015b60405180910390f35b61009661009136600461021a565b610114565b005b61007060015481565b6100b46100af36600461021a565b610162565b60405161007a92919061028c565b6100707f000000000000000000000000000000000000000000000000000000000000000081565b6000546100fc906001600160a01b031681565b6040516001600160a01b03909116815260200161007a565b7f00000000000000000000000000000000000000000000000000000000000000006002544261014391906102fa565b111561015e57426002556001805461015a91610313565b6001555b5050565b6000606060008060009054906101000a90046001600160a01b03166001600160a01b03166345a153886040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101de9190610326565b90507f00000000000000000000000000000000000000000000000000000000000000006002544261020f91906102fa565b119250509250929050565b6000806020838503121561022d57600080fd5b823567ffffffffffffffff8082111561024557600080fd5b818501915085601f83011261025957600080fd5b81358181111561026857600080fd5b86602082850101111561027a57600080fd5b60209290920196919550909350505050565b821515815260006020604081840152835180604085015260005b818110156102c2578581018301518582016060015282016102a6565b506000606082860101526060601f19601f830116850101925050509392505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561030d5761030d6102e4565b92915050565b8082018082111561030d5761030d6102e4565b60006020828403121561033857600080fd5b505191905056fea2646970667358221220d4b61373d0e1ff91fc987c35c2a251d312a6dea58c34a70410f554225fdac2b864736f6c63430008110033";

type ExchangePriceListenerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangePriceListenerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExchangePriceListener__factory extends ContractFactory {
  constructor(...args: ExchangePriceListenerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ExchangePriceListener";
  }

  deploy(
    updateInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExchangePriceListener> {
    return super.deploy(
      updateInterval,
      overrides || {}
    ) as Promise<ExchangePriceListener>;
  }
  getDeployTransaction(
    updateInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(updateInterval, overrides || {});
  }
  attach(address: string): ExchangePriceListener {
    return super.attach(address) as ExchangePriceListener;
  }
  connect(signer: Signer): ExchangePriceListener__factory {
    return super.connect(signer) as ExchangePriceListener__factory;
  }
  static readonly contractName: "ExchangePriceListener";
  public readonly contractName: "ExchangePriceListener";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangePriceListenerInterface {
    return new utils.Interface(_abi) as ExchangePriceListenerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExchangePriceListener {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ExchangePriceListener;
  }
}
