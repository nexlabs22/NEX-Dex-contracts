/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockApiOracleInterface extends utils.Interface {
  contractName: "MockApiOracle";
  functions: {
    "EXPIRY_TIME()": FunctionFragment;
    "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": FunctionFragment;
    "fulfillOracleFundingRateRequest(bytes32,bytes32,bytes32,bytes32,bytes32,bytes32)": FunctionFragment;
    "fulfillOracleOjectRequest(bytes32,bytes32)": FunctionFragment;
    "fulfillOracleStatusRequest(bytes32,string)": FunctionFragment;
    "getChainlinkToken()": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
    "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EXPIRY_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOracleRequest",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillOracleFundingRateRequest",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillOracleOjectRequest",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillOracleStatusRequest",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleRequest",
    values: [
      string,
      BigNumberish,
      BytesLike,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXPIRY_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOracleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillOracleFundingRateRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillOracleOjectRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillOracleStatusRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleRequest",
    data: BytesLike
  ): Result;

  events: {
    "CancelOracleRequest(bytes32)": EventFragment;
    "OracleRequest(bytes32,address,bytes32,uint256,address,bytes4,uint256,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelOracleRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRequest"): EventFragment;
}

export type CancelOracleRequestEvent = TypedEvent<
  [string],
  { requestId: string }
>;

export type CancelOracleRequestEventFilter =
  TypedEventFilter<CancelOracleRequestEvent>;

export type OracleRequestEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ],
  {
    specId: string;
    requester: string;
    requestId: string;
    payment: BigNumber;
    callbackAddr: string;
    callbackFunctionId: string;
    cancelExpiration: BigNumber;
    dataVersion: BigNumber;
    data: string;
  }
>;

export type OracleRequestEventFilter = TypedEventFilter<OracleRequestEvent>;

export interface MockApiOracle extends BaseContract {
  contractName: "MockApiOracle";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockApiOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXPIRY_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelOracleRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      arg2: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillOracleFundingRateRequest(
      _requestId: BytesLike,
      _data1: BytesLike,
      _data2: BytesLike,
      _data3: BytesLike,
      _data4: BytesLike,
      _data5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillOracleOjectRequest(
      _requestId: BytesLike,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillOracleStatusRequest(
      _requestId: BytesLike,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainlinkToken(overrides?: CallOverrides): Promise<[string]>;

    onTokenTransfer(
      _sender: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracleRequest(
      _sender: string,
      _payment: BigNumberish,
      _specId: BytesLike,
      _callbackAddress: string,
      _callbackFunctionId: BytesLike,
      _nonce: BigNumberish,
      _dataVersion: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  EXPIRY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  cancelOracleRequest(
    _requestId: BytesLike,
    _payment: BigNumberish,
    arg2: BytesLike,
    _expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillOracleFundingRateRequest(
    _requestId: BytesLike,
    _data1: BytesLike,
    _data2: BytesLike,
    _data3: BytesLike,
    _data4: BytesLike,
    _data5: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillOracleOjectRequest(
    _requestId: BytesLike,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillOracleStatusRequest(
    _requestId: BytesLike,
    _data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainlinkToken(overrides?: CallOverrides): Promise<string>;

  onTokenTransfer(
    _sender: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracleRequest(
    _sender: string,
    _payment: BigNumberish,
    _specId: BytesLike,
    _callbackAddress: string,
    _callbackFunctionId: BytesLike,
    _nonce: BigNumberish,
    _dataVersion: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EXPIRY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOracleRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      arg2: BytesLike,
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillOracleFundingRateRequest(
      _requestId: BytesLike,
      _data1: BytesLike,
      _data2: BytesLike,
      _data3: BytesLike,
      _data4: BytesLike,
      _data5: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fulfillOracleOjectRequest(
      _requestId: BytesLike,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fulfillOracleStatusRequest(
      _requestId: BytesLike,
      _data: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getChainlinkToken(overrides?: CallOverrides): Promise<string>;

    onTokenTransfer(
      _sender: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    oracleRequest(
      _sender: string,
      _payment: BigNumberish,
      _specId: BytesLike,
      _callbackAddress: string,
      _callbackFunctionId: BytesLike,
      _nonce: BigNumberish,
      _dataVersion: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelOracleRequest(bytes32)"(
      requestId?: BytesLike | null
    ): CancelOracleRequestEventFilter;
    CancelOracleRequest(
      requestId?: BytesLike | null
    ): CancelOracleRequestEventFilter;

    "OracleRequest(bytes32,address,bytes32,uint256,address,bytes4,uint256,uint256,bytes)"(
      specId?: BytesLike | null,
      requester?: null,
      requestId?: null,
      payment?: null,
      callbackAddr?: null,
      callbackFunctionId?: null,
      cancelExpiration?: null,
      dataVersion?: null,
      data?: null
    ): OracleRequestEventFilter;
    OracleRequest(
      specId?: BytesLike | null,
      requester?: null,
      requestId?: null,
      payment?: null,
      callbackAddr?: null,
      callbackFunctionId?: null,
      cancelExpiration?: null,
      dataVersion?: null,
      data?: null
    ): OracleRequestEventFilter;
  };

  estimateGas: {
    EXPIRY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOracleRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      arg2: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillOracleFundingRateRequest(
      _requestId: BytesLike,
      _data1: BytesLike,
      _data2: BytesLike,
      _data3: BytesLike,
      _data4: BytesLike,
      _data5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillOracleOjectRequest(
      _requestId: BytesLike,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillOracleStatusRequest(
      _requestId: BytesLike,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainlinkToken(overrides?: CallOverrides): Promise<BigNumber>;

    onTokenTransfer(
      _sender: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracleRequest(
      _sender: string,
      _payment: BigNumberish,
      _specId: BytesLike,
      _callbackAddress: string,
      _callbackFunctionId: BytesLike,
      _nonce: BigNumberish,
      _dataVersion: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXPIRY_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelOracleRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      arg2: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillOracleFundingRateRequest(
      _requestId: BytesLike,
      _data1: BytesLike,
      _data2: BytesLike,
      _data3: BytesLike,
      _data4: BytesLike,
      _data5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillOracleOjectRequest(
      _requestId: BytesLike,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillOracleStatusRequest(
      _requestId: BytesLike,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainlinkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onTokenTransfer(
      _sender: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracleRequest(
      _sender: string,
      _payment: BigNumberish,
      _specId: BytesLike,
      _callbackAddress: string,
      _callbackFunctionId: BytesLike,
      _nonce: BigNumberish,
      _dataVersion: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
