/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IExchangeInterface extends utils.Interface {
  contractName: "IExchange";
  functions: {
    "AutoCloseMargin()": FunctionFragment;
    "_calculatePartialLiquidateValue(address,uint256,uint256)": FunctionFragment;
    "_getNewAccountValue(address,uint256,uint256)": FunctionFragment;
    "_getNewPNL(address,uint256,uint256)": FunctionFragment;
    "_getNewPositionNotional(address,uint256,uint256)": FunctionFragment;
    "_isHardLiquidatable(address,uint256,uint256)": FunctionFragment;
    "_isNewMarginLiquidatable(address,uint256,uint256,uint256)": FunctionFragment;
    "_isPartialLiquidatable(address,uint256,uint256)": FunctionFragment;
    "_userNewMargin(address,uint256,uint256)": FunctionFragment;
    "absoluteInt(int256)": FunctionFragment;
    "activeUsers(uint256)": FunctionFragment;
    "calculatePartialLiquidateValue(address)": FunctionFragment;
    "changeNftOracleAddress(address)": FunctionFragment;
    "closePosition(uint256,uint256)": FunctionFragment;
    "closePositionComplete(uint256)": FunctionFragment;
    "collateral(address,address)": FunctionFragment;
    "depositCollateral(uint256)": FunctionFragment;
    "discountRate()": FunctionFragment;
    "doesUserExist(address)": FunctionFragment;
    "getAccountValue(address)": FunctionFragment;
    "getAllActiveUsers()": FunctionFragment;
    "getAllLongvAssetBalance()": FunctionFragment;
    "getAllShortvAssetBalance()": FunctionFragment;
    "getCurrentExchangePrice()": FunctionFragment;
    "getEthUsdPrice()": FunctionFragment;
    "getLongAssetAmountOut(uint256)": FunctionFragment;
    "getLongVusdAmountOut(uint256)": FunctionFragment;
    "getMinimumLongAssetOut(uint256)": FunctionFragment;
    "getMinimumLongUsdOut(uint256)": FunctionFragment;
    "getMinimumShortAssetOut(uint256)": FunctionFragment;
    "getMinimumShortUsdOut(uint256)": FunctionFragment;
    "getPNL(address)": FunctionFragment;
    "getPositionNotional(address)": FunctionFragment;
    "getShortAssetAmountOut(uint256)": FunctionFragment;
    "getShortVusdAmountOut(uint256)": FunctionFragment;
    "initialVirtualPool(uint256)": FunctionFragment;
    "isHardLiquidatable(address)": FunctionFragment;
    "isLongInRightRange(uint256)": FunctionFragment;
    "isPartialLiquidatable(address)": FunctionFragment;
    "isPriceIntheRightRange(uint256,uint256)": FunctionFragment;
    "isShortInRightRange(uint256)": FunctionFragment;
    "latestFeeUpdate()": FunctionFragment;
    "liquidationFee()": FunctionFragment;
    "maintenanceMargin()": FunctionFragment;
    "marketPrice()": FunctionFragment;
    "openLongPosition(uint256,uint256)": FunctionFragment;
    "openShortPosition(uint256,uint256)": FunctionFragment;
    "oraclePrice()": FunctionFragment;
    "owner()": FunctionFragment;
    "pool()": FunctionFragment;
    "poolInitialized()": FunctionFragment;
    "positive(int256)": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "removeLiquidationFee(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "saveLevelMargin()": FunctionFragment;
    "setFundingRate()": FunctionFragment;
    "setSwapFee(uint8)": FunctionFragment;
    "showPriceETH()": FunctionFragment;
    "showPriceUSD()": FunctionFragment;
    "swapFee()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdc()": FunctionFragment;
    "userMargin(address)": FunctionFragment;
    "uservAssetBalance(address)": FunctionFragment;
    "uservUsdBalance(address)": FunctionFragment;
    "vAssetPoolSize()": FunctionFragment;
    "vUsdPoolSize()": FunctionFragment;
    "virtualBalances(address)": FunctionFragment;
    "virtualCollateral(address)": FunctionFragment;
    "withdrawCollateral(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AutoCloseMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_calculatePartialLiquidateValue",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getNewAccountValue",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getNewPNL",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getNewPositionNotional",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_isHardLiquidatable",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_isNewMarginLiquidatable",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_isPartialLiquidatable",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_userNewMargin",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "absoluteInt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeUsers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePartialLiquidateValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeNftOracleAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionComplete",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "discountRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "doesUserExist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllActiveUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllLongvAssetBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllShortvAssetBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentExchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthUsdPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLongAssetAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLongVusdAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumLongAssetOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumLongUsdOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumShortAssetOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumShortUsdOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPNL", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPositionNotional",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getShortAssetAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getShortVusdAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialVirtualPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isHardLiquidatable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isLongInRightRange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPartialLiquidatable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPriceIntheRightRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isShortInRightRange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestFeeUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maintenanceMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openLongPosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openShortPosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oraclePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saveLevelMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "showPriceETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "showPriceUSD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "swapFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(functionFragment: "userMargin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "uservAssetBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uservUsdBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vAssetPoolSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vUsdPoolSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "virtualBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "virtualCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AutoCloseMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_calculatePartialLiquidateValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getNewAccountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getNewPNL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getNewPositionNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isHardLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isNewMarginLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isPartialLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_userNewMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "absoluteInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePartialLiquidateValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeNftOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesUserExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllLongvAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllShortvAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentExchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthUsdPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLongAssetAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLongVusdAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumLongAssetOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumLongUsdOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumShortAssetOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumShortUsdOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPNL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPositionNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShortAssetAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShortVusdAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialVirtualPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isHardLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLongInRightRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPartialLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPriceIntheRightRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isShortInRightRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestFeeUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maintenanceMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLongPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openShortPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oraclePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveLevelMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "showPriceETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showPriceUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userMargin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uservAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uservUsdBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vAssetPoolSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vUsdPoolSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "virtualBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "virtualCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IExchange extends BaseContract {
  contractName: "IExchange";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AutoCloseMargin(overrides?: CallOverrides): Promise<[number]>;

    _calculatePartialLiquidateValue(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getNewAccountValue(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getNewPNL(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getNewPositionNotional(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _isHardLiquidatable(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _isNewMarginLiquidatable(
      _user: string,
      _usdAmount: BigNumberish,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _isPartialLiquidatable(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _userNewMargin(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    absoluteInt(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    activeUsers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    calculatePartialLiquidateValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { x: BigNumber }>;

    changeNftOracleAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePosition(
      _assetSize: BigNumberish,
      _minimumUsdOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePositionComplete(
      _minimumUsdOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    discountRate(overrides?: CallOverrides): Promise<[number]>;

    doesUserExist(_user: string, overrides?: CallOverrides): Promise<[boolean]>;

    getAccountValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllActiveUsers(overrides?: CallOverrides): Promise<[string[]]>;

    getAllLongvAssetBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllShortvAssetBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentExchangePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEthUsdPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLongAssetAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLongVusdAmountOut(
      _vAssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumLongAssetOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumLongUsdOut(
      _AssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumShortAssetOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumShortUsdOut(
      _AssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPNL(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pnl: BigNumber }>;

    getPositionNotional(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getShortAssetAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getShortVusdAmountOut(
      _vAssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialVirtualPool(
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isHardLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLongInRightRange(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPartialLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPriceIntheRightRange(
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isShortInRightRange(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    latestFeeUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    maintenanceMargin(overrides?: CallOverrides): Promise<[number]>;

    marketPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    openLongPosition(
      _usdAmount: BigNumberish,
      _minimumAssetAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openShortPosition(
      _usdAmount: BigNumberish,
      _minimumAssetAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oraclePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vAssetPoolSize: BigNumber;
        vUsdPoolSize: BigNumber;
      }
    >;

    poolInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    positive(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidationFee(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saveLevelMargin(overrides?: CallOverrides): Promise<[number]>;

    setFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    showPriceETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    showPriceUSD(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapFee(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    userMargin(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    uservAssetBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uservUsdBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vAssetPoolSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    vUsdPoolSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    virtualBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        virtualCollateral: BigNumber;
        uservUsdBalance: BigNumber;
        uservAssetBalance: BigNumber;
      }
    >;

    virtualCollateral(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AutoCloseMargin(overrides?: CallOverrides): Promise<number>;

  _calculatePartialLiquidateValue(
    _user: string,
    _vAssetNewPoolSize: BigNumberish,
    _vUsdNewPoolSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getNewAccountValue(
    _user: string,
    _vAssetNewPoolSize: BigNumberish,
    _vUsdNewPoolSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getNewPNL(
    _user: string,
    _vAssetNewPoolSize: BigNumberish,
    _vUsdNewPoolSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getNewPositionNotional(
    _user: string,
    _vAssetNewPoolSize: BigNumberish,
    _vUsdNewPoolSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _isHardLiquidatable(
    _user: string,
    _vAssetNewPoolSize: BigNumberish,
    _vUsdNewPoolSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _isNewMarginLiquidatable(
    _user: string,
    _usdAmount: BigNumberish,
    _vAssetNewPoolSize: BigNumberish,
    _vUsdNewPoolSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _isPartialLiquidatable(
    _user: string,
    _vAssetNewPoolSize: BigNumberish,
    _vUsdNewPoolSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _userNewMargin(
    _user: string,
    _vAssetNewPoolSize: BigNumberish,
    _vUsdNewPoolSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  absoluteInt(
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  activeUsers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  calculatePartialLiquidateValue(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeNftOracleAddress(
    _newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePosition(
    _assetSize: BigNumberish,
    _minimumUsdOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePositionComplete(
    _minimumUsdOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateral(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositCollateral(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  discountRate(overrides?: CallOverrides): Promise<number>;

  doesUserExist(_user: string, overrides?: CallOverrides): Promise<boolean>;

  getAccountValue(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAllActiveUsers(overrides?: CallOverrides): Promise<string[]>;

  getAllLongvAssetBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getAllShortvAssetBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

  getEthUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getLongAssetAmountOut(
    _vUsdAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLongVusdAmountOut(
    _vAssetAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumLongAssetOut(
    _usdAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumLongUsdOut(
    _AssetAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumShortAssetOut(
    _usdAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumShortUsdOut(
    _AssetAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPNL(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPositionNotional(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getShortAssetAmountOut(
    _vUsdAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getShortVusdAmountOut(
    _vAssetAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialVirtualPool(
    _assetSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isHardLiquidatable(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLongInRightRange(
    _usdAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPartialLiquidatable(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPriceIntheRightRange(
    _vAssetNewPoolSize: BigNumberish,
    _vUsdNewPoolSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isShortInRightRange(
    _usdAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  latestFeeUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

  maintenanceMargin(overrides?: CallOverrides): Promise<number>;

  marketPrice(overrides?: CallOverrides): Promise<BigNumber>;

  openLongPosition(
    _usdAmount: BigNumberish,
    _minimumAssetAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openShortPosition(
    _usdAmount: BigNumberish,
    _minimumAssetAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oraclePrice(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pool(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      vAssetPoolSize: BigNumber;
      vUsdPoolSize: BigNumber;
    }
  >;

  poolInitialized(overrides?: CallOverrides): Promise<boolean>;

  positive(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  removeLiquidationFee(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saveLevelMargin(overrides?: CallOverrides): Promise<number>;

  setFundingRate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapFee(
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  showPriceETH(overrides?: CallOverrides): Promise<BigNumber>;

  showPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;

  swapFee(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  userMargin(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  uservAssetBalance(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uservUsdBalance(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  vAssetPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

  vUsdPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

  virtualBalances(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      virtualCollateral: BigNumber;
      uservUsdBalance: BigNumber;
      uservAssetBalance: BigNumber;
    }
  >;

  virtualCollateral(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawCollateral(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AutoCloseMargin(overrides?: CallOverrides): Promise<number>;

    _calculatePartialLiquidateValue(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getNewAccountValue(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getNewPNL(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getNewPositionNotional(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isHardLiquidatable(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isNewMarginLiquidatable(
      _user: string,
      _usdAmount: BigNumberish,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isPartialLiquidatable(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _userNewMargin(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    absoluteInt(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeUsers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    calculatePartialLiquidateValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeNftOracleAddress(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    closePosition(
      _assetSize: BigNumberish,
      _minimumUsdOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closePositionComplete(
      _minimumUsdOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCollateral(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    discountRate(overrides?: CallOverrides): Promise<number>;

    doesUserExist(_user: string, overrides?: CallOverrides): Promise<boolean>;

    getAccountValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllActiveUsers(overrides?: CallOverrides): Promise<string[]>;

    getAllLongvAssetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAllShortvAssetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getEthUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getLongAssetAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLongVusdAmountOut(
      _vAssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumLongAssetOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumLongUsdOut(
      _AssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumShortAssetOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumShortUsdOut(
      _AssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPNL(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPositionNotional(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortAssetAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortVusdAmountOut(
      _vAssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialVirtualPool(
      _assetSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isHardLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLongInRightRange(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPartialLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPriceIntheRightRange(
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isShortInRightRange(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    latestFeeUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    maintenanceMargin(overrides?: CallOverrides): Promise<number>;

    marketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    openLongPosition(
      _usdAmount: BigNumberish,
      _minimumAssetAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openShortPosition(
      _usdAmount: BigNumberish,
      _minimumAssetAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    oraclePrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vAssetPoolSize: BigNumber;
        vUsdPoolSize: BigNumber;
      }
    >;

    poolInitialized(overrides?: CallOverrides): Promise<boolean>;

    positive(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    removeLiquidationFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    saveLevelMargin(overrides?: CallOverrides): Promise<number>;

    setFundingRate(overrides?: CallOverrides): Promise<void>;

    setSwapFee(_newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    showPriceETH(overrides?: CallOverrides): Promise<BigNumber>;

    showPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdc(overrides?: CallOverrides): Promise<string>;

    userMargin(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    uservAssetBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uservUsdBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vAssetPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    vUsdPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    virtualBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        virtualCollateral: BigNumber;
        uservUsdBalance: BigNumber;
        uservAssetBalance: BigNumber;
      }
    >;

    virtualCollateral(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    AutoCloseMargin(overrides?: CallOverrides): Promise<BigNumber>;

    _calculatePartialLiquidateValue(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getNewAccountValue(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getNewPNL(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getNewPositionNotional(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isHardLiquidatable(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isNewMarginLiquidatable(
      _user: string,
      _usdAmount: BigNumberish,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isPartialLiquidatable(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _userNewMargin(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    absoluteInt(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeUsers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePartialLiquidateValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeNftOracleAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePosition(
      _assetSize: BigNumberish,
      _minimumUsdOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePositionComplete(
      _minimumUsdOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    discountRate(overrides?: CallOverrides): Promise<BigNumber>;

    doesUserExist(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllActiveUsers(overrides?: CallOverrides): Promise<BigNumber>;

    getAllLongvAssetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAllShortvAssetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getEthUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getLongAssetAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLongVusdAmountOut(
      _vAssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumLongAssetOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumLongUsdOut(
      _AssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumShortAssetOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumShortUsdOut(
      _AssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPNL(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPositionNotional(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortAssetAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortVusdAmountOut(
      _vAssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialVirtualPool(
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isHardLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLongInRightRange(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPartialLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPriceIntheRightRange(
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isShortInRightRange(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestFeeUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    maintenanceMargin(overrides?: CallOverrides): Promise<BigNumber>;

    marketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    openLongPosition(
      _usdAmount: BigNumberish,
      _minimumAssetAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openShortPosition(
      _usdAmount: BigNumberish,
      _minimumAssetAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oraclePrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    poolInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    positive(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidationFee(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saveLevelMargin(overrides?: CallOverrides): Promise<BigNumber>;

    setFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    showPriceETH(overrides?: CallOverrides): Promise<BigNumber>;

    showPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    userMargin(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    uservAssetBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uservUsdBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vAssetPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    vUsdPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    virtualBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    virtualCollateral(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AutoCloseMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _calculatePartialLiquidateValue(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getNewAccountValue(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getNewPNL(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getNewPositionNotional(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isHardLiquidatable(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isNewMarginLiquidatable(
      _user: string,
      _usdAmount: BigNumberish,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isPartialLiquidatable(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _userNewMargin(
      _user: string,
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    absoluteInt(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeUsers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePartialLiquidateValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeNftOracleAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePosition(
      _assetSize: BigNumberish,
      _minimumUsdOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePositionComplete(
      _minimumUsdOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    discountRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doesUserExist(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllActiveUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllLongvAssetBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllShortvAssetBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentExchangePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthUsdPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLongAssetAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLongVusdAmountOut(
      _vAssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumLongAssetOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumLongUsdOut(
      _AssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumShortAssetOut(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumShortUsdOut(
      _AssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPNL(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionNotional(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShortAssetAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShortVusdAmountOut(
      _vAssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialVirtualPool(
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isHardLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLongInRightRange(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPartialLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPriceIntheRightRange(
      _vAssetNewPoolSize: BigNumberish,
      _vUsdNewPoolSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isShortInRightRange(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestFeeUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maintenanceMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openLongPosition(
      _usdAmount: BigNumberish,
      _minimumAssetAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openShortPosition(
      _usdAmount: BigNumberish,
      _minimumAssetAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oraclePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positive(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidationFee(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saveLevelMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    showPriceETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    showPriceUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userMargin(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uservAssetBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uservUsdBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vAssetPoolSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vUsdPoolSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    virtualBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    virtualCollateral(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
