/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Exchange2 {
  export type LongOrderStruct = {
    price: BigNumberish;
    assetSize: BigNumberish;
    owner: string;
    filled: boolean;
  };

  export type LongOrderStructOutput = [
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    price: BigNumber;
    assetSize: BigNumber;
    owner: string;
    filled: boolean;
  };

  export type PositionStruct = {
    startTimestamp: BigNumberish;
    price: BigNumberish;
    longStartPrice: BigNumberish;
    shortStartPrice: BigNumberish;
    positionSize: BigNumberish;
    longAddress: string;
    shortAddress: string;
    isActive: boolean;
  };

  export type PositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean
  ] & {
    startTimestamp: BigNumber;
    price: BigNumber;
    longStartPrice: BigNumber;
    shortStartPrice: BigNumber;
    positionSize: BigNumber;
    longAddress: string;
    shortAddress: string;
    isActive: boolean;
  };

  export type ShortOrderStruct = {
    price: BigNumberish;
    assetSize: BigNumberish;
    owner: string;
    filled: boolean;
  };

  export type ShortOrderStructOutput = [
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    price: BigNumber;
    assetSize: BigNumber;
    owner: string;
    filled: boolean;
  };
}

export interface Exchange2Interface extends utils.Interface {
  contractName: "Exchange2";
  functions: {
    "AutoCloseMargin()": FunctionFragment;
    "ETHER()": FunctionFragment;
    "_addToLiquidateList(address)": FunctionFragment;
    "_closeLongPositionMarket(address,uint256,uint256)": FunctionFragment;
    "_closeShortPositionMarket(address,uint256,uint256)": FunctionFragment;
    "_getFreeCollateral(address)": FunctionFragment;
    "_getFundingRate(uint256,uint256)": FunctionFragment;
    "_hardLiquidate(address)": FunctionFragment;
    "_partialLiquidation(address)": FunctionFragment;
    "_realizePNL(address,uint256,uint256,uint256)": FunctionFragment;
    "adjustPositions()": FunctionFragment;
    "allLongOrders()": FunctionFragment;
    "allPositions()": FunctionFragment;
    "allShortOrders()": FunctionFragment;
    "assetAddress()": FunctionFragment;
    "calculatePartialLiquidateValue(address)": FunctionFragment;
    "cancelLongOrder(uint256)": FunctionFragment;
    "cancelShortOrder(uint256)": FunctionFragment;
    "collateral(address,address)": FunctionFragment;
    "collateralUsdValue(address)": FunctionFragment;
    "depositEther()": FunctionFragment;
    "discountRate()": FunctionFragment;
    "ethPrice()": FunctionFragment;
    "executePartialLiquidation()": FunctionFragment;
    "getAverageEntryPrice(address)": FunctionFragment;
    "getIndexPrice()": FunctionFragment;
    "getUserMargin(address)": FunctionFragment;
    "liquidationFee()": FunctionFragment;
    "isHardLiquidatable(address)": FunctionFragment;
    "isPartialLiquidatable(address)": FunctionFragment;
    "lastRequestId()": FunctionFragment;
    "latestPrice()": FunctionFragment;
    "latestRequestId()": FunctionFragment;
    "longOrders(uint256)": FunctionFragment;
    "maintenanceMargin()": FunctionFragment;
    "nftOracle()": FunctionFragment;
    "openLongOrder(address,uint256,uint256)": FunctionFragment;
    "openLongOrderUsd(address,uint256,uint256)": FunctionFragment;
    "openShortOrder(address,uint256,uint256)": FunctionFragment;
    "openShortOrderUsd(address,uint256,uint256)": FunctionFragment;
    "oracleLatestRoundId()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "payment()": FunctionFragment;
    "positions(uint256)": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "pricingAsset()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestPrice()": FunctionFragment;
    "saveLevelMargin()": FunctionFragment;
    "shortOrders(uint256)": FunctionFragment;
    "specId()": FunctionFragment;
    "totalAccountValue(address)": FunctionFragment;
    "totalAssetSize(address)": FunctionFragment;
    "totalInvestedValue(address)": FunctionFragment;
    "totalPositionNotional(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawEther(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AutoCloseMargin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ETHER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_addToLiquidateList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_closeLongPositionMarket",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_closeShortPositionMarket",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getFreeCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_getFundingRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_hardLiquidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_partialLiquidation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_realizePNL",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allLongOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allShortOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePartialLiquidateValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLongOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelShortOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralUsdValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEther",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "discountRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ethPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executePartialLiquidation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageEntryPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMargin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isHardLiquidatable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPartialLiquidatable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "longOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maintenanceMargin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nftOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openLongOrder",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openLongOrderUsd",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openShortOrder",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openShortOrderUsd",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleLatestRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "payment", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricingAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saveLevelMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shortOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "specId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAccountValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssetSize",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalInvestedValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPositionNotional",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AutoCloseMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ETHER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_addToLiquidateList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_closeLongPositionMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_closeShortPositionMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getFreeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_hardLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_partialLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_realizePNL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allLongOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allShortOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePartialLiquidateValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLongOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelShortOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralUsdValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ethPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executePartialLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageEntryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isHardLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPartialLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "longOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maintenanceMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openLongOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLongOrderUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openShortOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openShortOrderUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleLatestRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricingAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveLevelMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "specId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAccountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssetSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalInvestedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPositionNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "NewOracle(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { token: string; user: string; amount: BigNumber; balance: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type NewOracleEvent = TypedEvent<[string], { oracle: string }>;

export type NewOracleEventFilter = TypedEventFilter<NewOracleEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { token: string; user: string; amount: BigNumber; balance: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Exchange2 extends BaseContract {
  contractName: "Exchange2";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Exchange2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AutoCloseMargin(overrides?: CallOverrides): Promise<[number]>;

    ETHER(overrides?: CallOverrides): Promise<[string]>;

    _addToLiquidateList(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _closeLongPositionMarket(
      _user: string,
      _assetSize: BigNumberish,
      _positionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _closeShortPositionMarket(
      _user: string,
      _assetSize: BigNumberish,
      _positionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _getFreeCollateral(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getFundingRate(
      indexPrice: BigNumberish,
      oraclePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _hardLiquidate(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _partialLiquidation(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _realizePNL(
      _user: string,
      _startPrice: BigNumberish,
      _currentPrice: BigNumberish,
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adjustPositions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allLongOrders(
      overrides?: CallOverrides
    ): Promise<[Exchange2.LongOrderStructOutput[]]>;

    allPositions(
      overrides?: CallOverrides
    ): Promise<[Exchange2.PositionStructOutput[]]>;

    allShortOrders(
      overrides?: CallOverrides
    ): Promise<[Exchange2.ShortOrderStructOutput[]]>;

    assetAddress(overrides?: CallOverrides): Promise<[string]>;

    calculatePartialLiquidateValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { x: BigNumber }>;

    cancelLongOrder(
      _longOrderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelShortOrder(
      _shortOrderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralUsdValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositEther(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    discountRate(overrides?: CallOverrides): Promise<[number]>;

    ethPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    executePartialLiquidation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAverageEntryPrice(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIndexPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserMargin(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    isHardLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPartialLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastRequestId(overrides?: CallOverrides): Promise<[string]>;

    latestPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestRequestId(overrides?: CallOverrides): Promise<[string]>;

    longOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        price: BigNumber;
        assetSize: BigNumber;
        owner: string;
        filled: boolean;
      }
    >;

    maintenanceMargin(overrides?: CallOverrides): Promise<[number]>;

    nftOracle(overrides?: CallOverrides): Promise<[string]>;

    openLongOrder(
      _user: string,
      _assetSize: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openLongOrderUsd(
      _user: string,
      _usdAmount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openShortOrder(
      _user: string,
      _assetSize: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openShortOrderUsd(
      _user: string,
      _usdAmount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracleLatestRoundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    payment(overrides?: CallOverrides): Promise<[BigNumber]>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean
      ] & {
        startTimestamp: BigNumber;
        price: BigNumber;
        longStartPrice: BigNumber;
        shortStartPrice: BigNumber;
        positionSize: BigNumber;
        longAddress: string;
        shortAddress: string;
        isActive: boolean;
      }
    >;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    pricingAsset(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saveLevelMargin(overrides?: CallOverrides): Promise<[number]>;

    shortOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        price: BigNumber;
        assetSize: BigNumber;
        owner: string;
        filled: boolean;
      }
    >;

    specId(overrides?: CallOverrides): Promise<[string]>;

    totalAccountValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalAssetSize(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalInvestedValue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalPositionNotional(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEther(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AutoCloseMargin(overrides?: CallOverrides): Promise<number>;

  ETHER(overrides?: CallOverrides): Promise<string>;

  _addToLiquidateList(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _closeLongPositionMarket(
    _user: string,
    _assetSize: BigNumberish,
    _positionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _closeShortPositionMarket(
    _user: string,
    _assetSize: BigNumberish,
    _positionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _getFreeCollateral(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getFundingRate(
    indexPrice: BigNumberish,
    oraclePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _hardLiquidate(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _partialLiquidation(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _realizePNL(
    _user: string,
    _startPrice: BigNumberish,
    _currentPrice: BigNumberish,
    _assetSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adjustPositions(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allLongOrders(
    overrides?: CallOverrides
  ): Promise<Exchange2.LongOrderStructOutput[]>;

  allPositions(
    overrides?: CallOverrides
  ): Promise<Exchange2.PositionStructOutput[]>;

  allShortOrders(
    overrides?: CallOverrides
  ): Promise<Exchange2.ShortOrderStructOutput[]>;

  assetAddress(overrides?: CallOverrides): Promise<string>;

  calculatePartialLiquidateValue(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelLongOrder(
    _longOrderId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelShortOrder(
    _shortOrderId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateral(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralUsdValue(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositEther(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  discountRate(overrides?: CallOverrides): Promise<number>;

  ethPrice(overrides?: CallOverrides): Promise<BigNumber>;

  executePartialLiquidation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAverageEntryPrice(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIndexPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getUserMargin(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

  isHardLiquidatable(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPartialLiquidatable(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastRequestId(overrides?: CallOverrides): Promise<string>;

  latestPrice(overrides?: CallOverrides): Promise<BigNumber>;

  latestRequestId(overrides?: CallOverrides): Promise<string>;

  longOrders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, boolean] & {
      price: BigNumber;
      assetSize: BigNumber;
      owner: string;
      filled: boolean;
    }
  >;

  maintenanceMargin(overrides?: CallOverrides): Promise<number>;

  nftOracle(overrides?: CallOverrides): Promise<string>;

  openLongOrder(
    _user: string,
    _assetSize: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openLongOrderUsd(
    _user: string,
    _usdAmount: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openShortOrder(
    _user: string,
    _assetSize: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openShortOrderUsd(
    _user: string,
    _usdAmount: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracleLatestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  payment(overrides?: CallOverrides): Promise<BigNumber>;

  positions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean
    ] & {
      startTimestamp: BigNumber;
      price: BigNumber;
      longStartPrice: BigNumber;
      shortStartPrice: BigNumber;
      positionSize: BigNumber;
      longAddress: string;
      shortAddress: string;
      isActive: boolean;
    }
  >;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  pricingAsset(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestPrice(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saveLevelMargin(overrides?: CallOverrides): Promise<number>;

  shortOrders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, boolean] & {
      price: BigNumber;
      assetSize: BigNumber;
      owner: string;
      filled: boolean;
    }
  >;

  specId(overrides?: CallOverrides): Promise<string>;

  totalAccountValue(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalAssetSize(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalInvestedValue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalPositionNotional(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEther(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AutoCloseMargin(overrides?: CallOverrides): Promise<number>;

    ETHER(overrides?: CallOverrides): Promise<string>;

    _addToLiquidateList(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _closeLongPositionMarket(
      _user: string,
      _assetSize: BigNumberish,
      _positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _closeShortPositionMarket(
      _user: string,
      _assetSize: BigNumberish,
      _positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _getFreeCollateral(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getFundingRate(
      indexPrice: BigNumberish,
      oraclePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _hardLiquidate(_user: string, overrides?: CallOverrides): Promise<void>;

    _partialLiquidation(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _realizePNL(
      _user: string,
      _startPrice: BigNumberish,
      _currentPrice: BigNumberish,
      _assetSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustPositions(overrides?: CallOverrides): Promise<void>;

    allLongOrders(
      overrides?: CallOverrides
    ): Promise<Exchange2.LongOrderStructOutput[]>;

    allPositions(
      overrides?: CallOverrides
    ): Promise<Exchange2.PositionStructOutput[]>;

    allShortOrders(
      overrides?: CallOverrides
    ): Promise<Exchange2.ShortOrderStructOutput[]>;

    assetAddress(overrides?: CallOverrides): Promise<string>;

    calculatePartialLiquidateValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelLongOrder(
      _longOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelShortOrder(
      _shortOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralUsdValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositEther(overrides?: CallOverrides): Promise<void>;

    discountRate(overrides?: CallOverrides): Promise<number>;

    ethPrice(overrides?: CallOverrides): Promise<BigNumber>;

    executePartialLiquidation(overrides?: CallOverrides): Promise<void>;

    getAverageEntryPrice(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getUserMargin(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    isHardLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPartialLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastRequestId(overrides?: CallOverrides): Promise<string>;

    latestPrice(overrides?: CallOverrides): Promise<BigNumber>;

    latestRequestId(overrides?: CallOverrides): Promise<string>;

    longOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        price: BigNumber;
        assetSize: BigNumber;
        owner: string;
        filled: boolean;
      }
    >;

    maintenanceMargin(overrides?: CallOverrides): Promise<number>;

    nftOracle(overrides?: CallOverrides): Promise<string>;

    openLongOrder(
      _user: string,
      _assetSize: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openLongOrderUsd(
      _user: string,
      _usdAmount: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openShortOrder(
      _user: string,
      _assetSize: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openShortOrderUsd(
      _user: string,
      _usdAmount: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    oracleLatestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    payment(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean
      ] & {
        startTimestamp: BigNumber;
        price: BigNumber;
        longStartPrice: BigNumber;
        shortStartPrice: BigNumber;
        positionSize: BigNumber;
        longAddress: string;
        shortAddress: string;
        isActive: boolean;
      }
    >;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    pricingAsset(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestPrice(overrides?: CallOverrides): Promise<void>;

    saveLevelMargin(overrides?: CallOverrides): Promise<number>;

    shortOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        price: BigNumber;
        assetSize: BigNumber;
        owner: string;
        filled: boolean;
      }
    >;

    specId(overrides?: CallOverrides): Promise<string>;

    totalAccountValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAssetSize(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalInvestedValue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPositionNotional(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEther(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,address,uint256,uint256)"(
      token?: null,
      user?: null,
      amount?: null,
      balance?: null
    ): DepositEventFilter;
    Deposit(
      token?: null,
      user?: null,
      amount?: null,
      balance?: null
    ): DepositEventFilter;

    "NewOracle(address)"(oracle?: null): NewOracleEventFilter;
    NewOracle(oracle?: null): NewOracleEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(address,address,uint256,uint256)"(
      token?: null,
      user?: null,
      amount?: null,
      balance?: null
    ): WithdrawEventFilter;
    Withdraw(
      token?: null,
      user?: null,
      amount?: null,
      balance?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    AutoCloseMargin(overrides?: CallOverrides): Promise<BigNumber>;

    ETHER(overrides?: CallOverrides): Promise<BigNumber>;

    _addToLiquidateList(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _closeLongPositionMarket(
      _user: string,
      _assetSize: BigNumberish,
      _positionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _closeShortPositionMarket(
      _user: string,
      _assetSize: BigNumberish,
      _positionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _getFreeCollateral(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getFundingRate(
      indexPrice: BigNumberish,
      oraclePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _hardLiquidate(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _partialLiquidation(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _realizePNL(
      _user: string,
      _startPrice: BigNumberish,
      _currentPrice: BigNumberish,
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adjustPositions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allLongOrders(overrides?: CallOverrides): Promise<BigNumber>;

    allPositions(overrides?: CallOverrides): Promise<BigNumber>;

    allShortOrders(overrides?: CallOverrides): Promise<BigNumber>;

    assetAddress(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePartialLiquidateValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelLongOrder(
      _longOrderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelShortOrder(
      _shortOrderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralUsdValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositEther(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    discountRate(overrides?: CallOverrides): Promise<BigNumber>;

    ethPrice(overrides?: CallOverrides): Promise<BigNumber>;

    executePartialLiquidation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAverageEntryPrice(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getUserMargin(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    isHardLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPartialLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    latestPrice(overrides?: CallOverrides): Promise<BigNumber>;

    latestRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    longOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maintenanceMargin(overrides?: CallOverrides): Promise<BigNumber>;

    nftOracle(overrides?: CallOverrides): Promise<BigNumber>;

    openLongOrder(
      _user: string,
      _assetSize: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openLongOrderUsd(
      _user: string,
      _usdAmount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openShortOrder(
      _user: string,
      _assetSize: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openShortOrderUsd(
      _user: string,
      _usdAmount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracleLatestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    payment(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    pricingAsset(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saveLevelMargin(overrides?: CallOverrides): Promise<BigNumber>;

    shortOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    specId(overrides?: CallOverrides): Promise<BigNumber>;

    totalAccountValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAssetSize(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalInvestedValue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPositionNotional(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEther(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AutoCloseMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ETHER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _addToLiquidateList(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _closeLongPositionMarket(
      _user: string,
      _assetSize: BigNumberish,
      _positionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _closeShortPositionMarket(
      _user: string,
      _assetSize: BigNumberish,
      _positionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _getFreeCollateral(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getFundingRate(
      indexPrice: BigNumberish,
      oraclePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _hardLiquidate(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _partialLiquidation(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _realizePNL(
      _user: string,
      _startPrice: BigNumberish,
      _currentPrice: BigNumberish,
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adjustPositions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allLongOrders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allPositions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allShortOrders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculatePartialLiquidateValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelLongOrder(
      _longOrderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelShortOrder(
      _shortOrderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralUsdValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositEther(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    discountRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executePartialLiquidation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAverageEntryPrice(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserMargin(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isHardLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPartialLiquidatable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    longOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maintenanceMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openLongOrder(
      _user: string,
      _assetSize: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openLongOrderUsd(
      _user: string,
      _usdAmount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openShortOrder(
      _user: string,
      _assetSize: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openShortOrderUsd(
      _user: string,
      _usdAmount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracleLatestRoundId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricingAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saveLevelMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shortOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    specId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAccountValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAssetSize(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalInvestedValue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPositionNotional(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
